name: Update Traffic Data

on:
  schedule:
    - cron: '* * * * *' # Every minute
  workflow_dispatch:

jobs:
  update-traffic:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Fetch Traffic Data
        run: |
          # Get current traffic data
          CURRENT_DATA=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/traffic/views")
          
          TOTAL_VIEWS=$(echo $CURRENT_DATA | jq '.count')
          UNIQUE_VIEWS=$(echo $CURRENT_DATA | jq '.uniques')
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Create or update JSON with 24hr data structure
          cat > public/traffic.json << EOF
          {
            "total_views": $TOTAL_VIEWS,
            "unique_views": $UNIQUE_VIEWS,
            "last_updated": "$TIMESTAMP",
            "last_24h": {
              "views": $TOTAL_VIEWS,
              "period": "24 hours",
              "updated_at": "$TIMESTAMP"
            },
            "summary": {
              "daily_average": $(echo "scale=1; $TOTAL_VIEWS / 30" | bc -l 2>/dev/null || echo "0"),
              "status": "active"
            }
          }
          EOF
          
      - name: Commit Traffic Data
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add public/traffic.json
          git commit -m "Update traffic data [skip ci]" || exit 0
          git push
          
      - name: Keep only 2 latest builds
        uses: actions/github-script@v6
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'update-traffic.yml',
              per_page: 100
            });
            
            const toDelete = runs.data.workflow_runs.slice(2);
            for (const run of toDelete) {
              await github.rest.actions.deleteWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run.id
              });
            }