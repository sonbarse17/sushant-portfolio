---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Portfolio of Sushant Sonbarse, DevOps Engineer specializing in automation, containerization, and CI/CD pipelines." } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" x-data="{ lightMode: false }" x-init="lightMode = localStorage.getItem('lightMode') === 'true'" :class="{ 'light': lightMode }">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{title}</title>
  <meta name="description" content={description} />
  <meta name="keywords" content="DevOps, AWS, Kubernetes, Docker, CI/CD, Terraform, Jenkins" />
  <meta name="author" content="Sushant Sonbarse" />
  
  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/sushant-portfolio/favicon.svg" />
</head>
<body class="bg-black text-white transition-colors duration-300" :class="lightMode ? 'bg-white text-gray-900' : 'bg-black text-white'">
  <!-- Header -->
  <header class="fixed top-0 w-full backdrop-blur-xl z-50 border-b shadow-2xl transition-colors duration-300" :class="lightMode ? 'bg-white/80 border-gray-200/50' : 'bg-black/80 border-gray-800/50'">
    <nav class="container mx-auto px-4 sm:px-6 py-4 flex justify-between items-center">
      <h1 class="text-lg sm:text-xl font-bold transition-colors duration-300" :class="lightMode ? 'text-blue-600' : 'text-blue-400'">Sushant Sonbarse</h1>
      <div class="flex items-center gap-4">
        <div class="text-sm transition-colors duration-300" :class="lightMode ? 'text-gray-600' : 'text-gray-400'">
          <span class="font-medium">Portfolio Views:</span> <span id="traffic-count" class="text-blue-400 font-bold">-</span>
        </div>
        <button 
          @click="lightMode = !lightMode; localStorage.setItem('lightMode', lightMode)"
          class="group relative p-2 sm:p-3 rounded-xl backdrop-blur-sm border transition-all duration-300 hover:scale-105 shadow-lg"
          :class="lightMode ? 'bg-gradient-to-r from-gray-100/80 to-gray-200/80 border-gray-300/50 hover:border-blue-500/50 hover:shadow-blue-500/20' : 'bg-gradient-to-r from-gray-900/80 to-gray-800/80 border-gray-700/50 hover:border-blue-500/50 hover:shadow-blue-500/20'"
          aria-label="Toggle Theme"
        >
          <div class="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          <span x-show="!lightMode" class="relative text-blue-400 text-base sm:text-lg">‚òÄÔ∏è</span>
          <span x-show="lightMode" class="relative text-purple-600 text-base sm:text-lg">üåô</span>
        </button>
      </div>
    </nav>
  </header>

  <main class="pt-16 sm:pt-20">
    <slot />
  </main>

  <!-- Footer -->
  <footer class="py-6 sm:py-8 mt-12 sm:mt-16 transition-colors duration-300" :class="lightMode ? 'bg-gray-100' : 'bg-black'">
    <div class="container mx-auto px-4 sm:px-6 text-center transition-colors duration-300" :class="lightMode ? 'text-gray-600' : 'text-gray-500'">
      <p class="text-sm sm:text-base">&copy; 2025 Sushant Sonbarse. All rights reserved.</p>
    </div>
  </footer>

  <!-- Alpine.js -->
  <script src="https://unpkg.com/alpinejs@3.14.7/dist/cdn.min.js" defer></script>
  
  <!-- Visit Counter & Smooth scroll -->
  <script>
    // GitHub Pages traffic counter from JSON file
    async function fetchGitHubTraffic() {
      console.log('Fetching traffic data...');
      try {
        const url = '/sushant-portfolio/traffic.json?t=' + Date.now();
        console.log('Fetching from URL:', url);
        const response = await fetch(url);
        console.log('Response status:', response.status);
        
        if (response.ok) {
          const data = await response.json();
          console.log('Traffic data received:', data);
          const views = data.last_24h?.views || data.total_views || 0;
          console.log('Views to display:', views);
          document.getElementById('traffic-count').textContent = views;
          console.log('Traffic count updated successfully');
        } else {
          console.error('Failed to fetch traffic.json:', response.status);
          document.getElementById('traffic-count').textContent = 'N/A';
        }
      } catch (error) {
        console.error('Failed to fetch traffic data:', error);
        document.getElementById('traffic-count').textContent = 'Error';
      }
    }
    
    // Initialize traffic count on page load
    document.addEventListener('DOMContentLoaded', fetchGitHubTraffic);
    
    // Smooth scroll
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });
  </script>
</body>
</html>