
---
---

<section class="py-12 transition-colors duration-300" :class="lightMode ? 'bg-gray-50' : 'bg-gray-900'">
  <div class="container mx-auto px-4 sm:px-6">
    <div class="max-w-6xl mx-auto">
      <!-- Search and Filter Controls -->
      <div class="mb-12 space-y-6">
        <!-- Search Bar -->
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="w-5 h-5 transition-colors duration-300" :class="lightMode ? 'text-gray-400' : 'text-gray-500'" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <input
            type="text"
            id="search-input"
            placeholder="Search projects, skills, or technologies..."
            class="w-full pl-10 pr-4 py-3 rounded-xl border transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            :class="lightMode ? 'bg-white border-gray-200 text-gray-900 placeholder-gray-400' : 'bg-gray-800 border-gray-700 text-white placeholder-gray-500'"
            oninput="performSearch()"
          />
        </div>

        <!-- Filter Buttons -->
        <div class="flex flex-wrap gap-3">
          <button
            onclick="filterContent('all')"
            class="filter-btn active px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            :class="lightMode ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-blue-500 text-white hover:bg-blue-600'"
          >
            All
          </button>
          <button
            onclick="filterContent('aws')"
            class="filter-btn px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            :class="lightMode ? 'bg-gray-200 text-gray-700 hover:bg-gray-300' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'"
          >
            AWS
          </button>
          <button
            onclick="filterContent('kubernetes')"
            class="filter-btn px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            :class="lightMode ? 'bg-gray-200 text-gray-700 hover:bg-gray-300' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'"
          >
            Kubernetes
          </button>
          <button
            onclick="filterContent('docker')"
            class="filter-btn px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            :class="lightMode ? 'bg-gray-200 text-gray-700 hover:bg-gray-300' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'"
          >
            Docker
          </button>
          <button
            onclick="filterContent('terraform')"
            class="filter-btn px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            :class="lightMode ? 'bg-gray-200 text-gray-700 hover:bg-gray-300' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'"
          >
            Terraform
          </button>
          <button
            onclick="filterContent('cicd')"
            class="filter-btn px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            :class="lightMode ? 'bg-gray-200 text-gray-700 hover:bg-gray-300' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'"
          >
            CI/CD
          </button>
        </div>
      </div>

      <!-- Search Results -->
      <div id="search-results" class="hidden">
        <h3 class="text-2xl font-bold mb-6 transition-colors duration-300" :class="lightMode ? 'text-gray-900' : 'text-white'">Search Results</h3>
        <div id="results-container" class="space-y-4">
          <!-- Results will be populated here -->
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  let searchIndex = [];
  let currentFilter = 'all';

  // Initialize search index
  function initializeSearchIndex() {
    // Projects
    const projects = [
      {
        type: 'project',
        title: 'CRM Real Estate Microservices',
        description: 'Deployed a comprehensive CRM platform with 35 microservices using modern containerization and infrastructure as code',
        technologies: ['aws', 'kubernetes', 'docker', 'terraform', 'angular', 'spring-boot'],
        url: '/sushant-portfolio/projects/crm-microservices.html',
        element: 'projects'
      },
      {
        type: 'project',
        title: 'CI/CD Pipeline Implementation',
        description: 'Automated testing and deployment pipeline reducing deployment time by 85%',
        technologies: ['jenkins', 'docker', 'kubernetes', 'git', 'cicd'],
        url: '/sushant-portfolio/projects/cicd-implementation.html',
        element: 'projects'
      },
      {
        type: 'project',
        title: 'AWS Serverless 3-Tier Architecture',
        description: 'Scalable serverless architecture with comprehensive monitoring and security',
        technologies: ['aws', 'lambda', 'cloudfront', 's3', 'rds', 'terraform'],
        url: '/sushant-portfolio/projects/serverless-architecture.html',
        element: 'projects'
      }
    ];

    // Skills
    const skills = [
      { type: 'skill', title: 'AWS', description: 'Amazon Web Services cloud platform', technologies: ['aws'], element: 'skills' },
      { type: 'skill', title: 'Kubernetes', description: 'Container orchestration platform', technologies: ['kubernetes'], element: 'skills' },
      { type: 'skill', title: 'Docker', description: 'Containerization platform', technologies: ['docker'], element: 'skills' },
      { type: 'skill', title: 'Terraform', description: 'Infrastructure as Code tool', technologies: ['terraform'], element: 'skills' },
      { type: 'skill', title: 'Jenkins', description: 'Automation server for CI/CD', technologies: ['jenkins', 'cicd'], element: 'skills' },
      { type: 'skill', title: 'Git', description: 'Version control system', technologies: ['git'], element: 'skills' }
    ];

    // Blog articles
    const articles = [
      {
        type: 'article',
        title: 'Kubernetes Best Practices for Production',
        description: 'Essential guidelines for running Kubernetes clusters in production environments',
        technologies: ['kubernetes', 'production', 'security'],
        element: 'blog'
      },
      {
        type: 'article',
        title: 'Optimizing CI/CD Pipelines',
        description: 'Strategies to reduce build times and improve deployment reliability',
        technologies: ['cicd', 'jenkins', 'optimization'],
        element: 'blog'
      },
      {
        type: 'article',
        title: 'Infrastructure as Code with Terraform',
        description: 'Complete guide to managing cloud infrastructure using Terraform',
        technologies: ['terraform', 'aws', 'infrastructure'],
        element: 'blog'
      }
    ];

    searchIndex = [...projects, ...skills, ...articles];
  }

  // Perform search
  function performSearch() {
    const query = document.getElementById('search-input').value.toLowerCase().trim();
    const resultsContainer = document.getElementById('results-container');
    const searchResults = document.getElementById('search-results');

    if (query === '') {
      searchResults.classList.add('hidden');
      return;
    }

    const filteredResults = searchIndex.filter(item => {
      const matchesSearch = 
        item.title.toLowerCase().includes(query) ||
        item.description.toLowerCase().includes(query) ||
        item.technologies.some(tech => tech.toLowerCase().includes(query));

      const matchesFilter = currentFilter === 'all' || item.technologies.includes(currentFilter);

      return matchesSearch && matchesFilter;
    });

    if (filteredResults.length === 0) {
      resultsContainer.innerHTML = '<p class="text-gray-500">No results found.</p>';
    } else {
      resultsContainer.innerHTML = filteredResults.map(item => `
        <div class="p-4 rounded-lg border transition-all duration-300 hover:shadow-lg cursor-pointer" 
             onclick="scrollToSection('${item.element}')"
             :class="lightMode ? 'bg-white border-gray-200 hover:border-blue-300' : 'bg-gray-800 border-gray-700 hover:border-blue-500'">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <h4 class="font-semibold mb-2 transition-colors duration-300" :class="lightMode ? 'text-gray-900' : 'text-white'">${item.title}</h4>
              <p class="text-sm mb-3 transition-colors duration-300" :class="lightMode ? 'text-gray-600' : 'text-gray-400'">${item.description}</p>
              <div class="flex flex-wrap gap-2">
                ${item.technologies.map(tech => `
                  <span class="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800">${tech}</span>
                `).join('')}
              </div>
            </div>
            <span class="px-2 py-1 text-xs rounded-full ml-4 transition-colors duration-300" 
                  :class="lightMode ? 'bg-gray-100 text-gray-600' : 'bg-gray-700 text-gray-300'">${item.type}</span>
          </div>
        </div>
      `).join('');
    }

    searchResults.classList.remove('hidden');
  }

  // Filter content
  function filterContent(filter) {
    currentFilter = filter;
    
    // Update button states
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.classList.remove('active');
      if (Alpine.store('theme') && Alpine.store('theme').lightMode) {
        btn.className = 'filter-btn px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50 bg-gray-200 text-gray-700 hover:bg-gray-300';
      } else {
        btn.className = 'filter-btn px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50 bg-gray-700 text-gray-300 hover:bg-gray-600';
      }
    });

    // Highlight active button
    event.target.classList.add('active');
    if (Alpine.store('theme') && Alpine.store('theme').lightMode) {
      event.target.className = 'filter-btn active px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50 bg-blue-600 text-white hover:bg-blue-700';
    } else {
      event.target.className = 'filter-btn active px-4 py-2 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50 bg-blue-500 text-white hover:bg-blue-600';
    }

    // Re-run search if there's a query
    performSearch();
  }

  // Scroll to section
  function scrollToSection(sectionId) {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
      // Clear search results
      document.getElementById('search-results').classList.add('hidden');
      document.getElementById('search-input').value = '';
    }
  }

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', initializeSearchIndex);
</script>
